{"username":"matteo_rampolla1","email":"matteo.rampolla96@gmail.com","country":"Italy","company":"","name":"Matteo Rampolla","city":"Rome","website":"","job_title":"","personal_first_name":"Matteo","personal_last_name":"Rampolla","graduation_year":"2024","timezone":"Europe/Rome","is_professional":false,"hackos":707,"favorite_challenges":[],"challenges_created":[],"other_emails":[],"all_schools":[],"snippets":[],"submissions":[{"contest":"Master","challenge":"Say \"Hello, World!\" With Python","code":"if __name__ == '__main__':\n    print(\"Hello, World!\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    if (n%2==0 and 2\u003cn\u003c5): print(\"Not Weird\")\n    elif (n%2==0 and 6\u003cn\u003c20): print(\"Weird\")\n    elif (n%2==0 and n\u003e20): print(\"Not Weird\")\n    elif (n%2==1): print(\"Weird\")\n","score":0.833333333333,"language":"pypy3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    if (n%2==1): print(\"Weird\")\n    if (n%2==0 and 2\u003cn\u003c5): print(\"Not Weird\")\n    if (n%2==0 and 6\u003cn\u003c20): print(\"Weird\")\n    if (n%2==0 and n\u003e20): print(\"Not Weird\")\n","score":0.833333333333,"language":"pypy3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    if (n%2==1): print(\"Weird\")\n    if (n%2==0 and 2\u003c= n\u003c= 5): print(\"Not Weird\")\n    if (n%2==0 and 6\u003c=n \u003c=20): print(\"Weird\")\n    if (n%2==0 and n\u003e20): print(\"Not Weird\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Arithmetic Operators","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a+b)\n    print(a-b)\n    print(a*b)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Arithmetic Operators","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a+b)\n    print(a-b)\n    print(a*b)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Python: Division","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a//b)\n    print(a/b)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Python: Division","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a//b)\n    print(a/b)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Loops","code":"if __name__ == '__main__':\n    n = int(input())\n    for x in range(n):\n        print(x*x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Loops","code":"if __name__ == '__main__':\n    n = int(input())\n    for x in range(n):\n        print(x*x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year//4==0):\n        leap = True\n    if (year//100==0 and not(year//400==0)):\n        leap= False\n    return leap\n\n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year//4==0):\n        leap = True\n    if (year//100==0 and not(year//400==0)):\n        leap= False\n    return leap\n\n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year//4==0 and not(year//100==0)):\n        leap = True\n    return leap\n\n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year//4==0 and not(year//100==0)):\n        leap = True\n    elif(not(year//400==0)):\n        leap= False\n    return leap\n\n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    if (year//4==0):\n        if(year//100==0):\n            if(year//400==0):\n                return True\n    return False\n    \n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year//4==0):\n        leap = True\n        if(year//100==0):\n            leap= False\n            if(year//400==0):\n                leap = True\n    return leap\n    \n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Print Function","code":"if __name__ == '__main__':\n    n = int(input())\n    s = ''\n    for x in range(n):\n        s = s+str(x+1)\n    print(s)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (year//4==0):\n        leap = True\n        if(year//100==0):\n            leap= False\n            if(year//400==0):\n                leap = True\n    return leap\n    \n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False;\n    if (year//400==0 and year//100==0):\n        leap = True\n    if  (year//4==0 and not(year//100)==0):\n        leap= True\n    return leap\n    \n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False;\n    if(1900\u003c= year \u003c= 10**5):\n    if (year//400==0 and year//100==0):\n        leap = True\n    if  (year//4==0 and not(year//100)==0):\n        leap= True\n    return leap\n    \n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False;\n    if(1900\u003c= year \u003c= 10**5):\n        if (year//400==0 and year//100==0):\n            leap = True\n        if  (year//4==0 and not(year//100)==0):\n            leap= True\n    return leap\n    \n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if(year//4==0 and not(year//100==0)):\n        leap = True\n    elif(year//400==0 and year//100==0):\n        leap= True\n    \n    return leap\n\n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (1900 \u003c= year \u003c= 10**5):\n        if(year//4==0 and not(year//100==0)):\n            leap = True\n        elif(year//400==0 and year//100==0):\n            leap= True\n    \n    return leap\n\n","score":0.4,"language":"pypy3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n    arr=[]\n    for a in range(x+1):\n        for b in range(y+1):\n            for c in range(z+1):\n                if (a+b+c!=n):\n                    arr.append([a,b,c])\n    print(arr)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if (1900 \u003c= year \u003c= 10**5):\n        if(year%4==0 and not(year%100==0)):\n            leap = True\n        elif(year%400==0 and year%100==0):\n            leap= True\n    \n    return leap\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\n    arr= [[a,b,c] for a in range(x+1) for b in range(y+1) for c in range(z+1) if a+b+c!=n]\n    print(arr)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    first = 0\n    second = 0\n    for x in arr:\n        if x \u003e first: \n            first = x\n        elif second\u003cx\u003cfirst:\n            second = x\n    print(second)\n","score":0.555555555556,"language":"pypy3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    first = 0\n    second = 0\n    for x in arr:\n        if x \u003e first: \n            first = x\n        elif x\u003esecond and x\u003cfirst:\n            second = x\n    print(second)\n","score":0.555555555556,"language":"pypy3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    first = 0\n    second = 0\n    for x in arr:\n        if x \u003e first: \n            first = x\n        elif x\u003esecond and x\u003cfirst:\n            second = x\n    print(second)\n","score":0.555555555556,"language":"pypy3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    first = 0\n    second = 0\n    for x in arr:\n        if x \u003e= first: \n            first = x\n        elif x\u003e=second and x\u003c=first:\n            second = x\n    print(second)\n","score":0.555555555556,"language":"pypy3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    first = 0\n    second = 0\n    for x in arr:\n        if x \u003e= first: \n            first = x\n        elif x\u003e=second and x\u003cfirst:\n            second = x\n    print(second)\n","score":0.555555555556,"language":"pypy3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    lista = sorted(set(arr))\n    print(lista[-2])\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Finding the percentage","code":"if __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    valori = student_marks.get(query_name)\n    s = 0\n    k = 0\n    for x in valori:\n        k += 1\n        s = s + x\n    print(\"{:.2f}\".format(s/k))\n        \n        \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Lists","code":"if __name__ == '__main__':\n    N = int(input())\n    l = []\n    while (N \u003e 0):\n        stringa = input().split()\n        if (stringa[0] == 'insert'):\n            i = int(stringa[1])\n            e = int(stringa[2])\n            l.insert(i,e)   \n        if (stringa[0] == 'print'):\n            print(l)\n        if (stringa[0] == 'remove'):\n            x = int(stringa[1])\n            for a in l:\n                if a==x:\n                    l.remove(a)\n        if (stringa[0] == 'append'):\n            a = int(stringa[1])\n            l.append(a)\n        if (stringa[0] == 'sort'):\n            l = sorted(l)\n        if (stringa[0] == 'pop'):\n            del l[-1]\n        if (stringa[0] == 'reverse'):\n            l.reverse()\n        N = N - 1\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Lists","code":"if __name__ == '__main__':\n    N = int(input())\n    l = []\n    while (N \u003e 0):\n        stringa = input().split()\n        if (stringa[0] == 'insert'):\n            i = int(stringa[1])\n            e = int(stringa[2])\n            l.insert(i,e)   \n        if (stringa[0] == 'print'):\n            print(l)\n        if (stringa[0] == 'remove'):\n            x = int(stringa[1])\n            for a in l:\n                if a==x:\n                    l.remove(a)\n        if (stringa[0] == 'append'):\n            a = int(stringa[1])\n            l.append(a)\n        if (stringa[0] == 'sort'):\n            l = sorted(l)\n        if (stringa[0] == 'pop'):\n            del l[-1]\n        if (stringa[0] == 'reverse'):\n            l.reverse()\n        N = N - 1\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Lists","code":"if __name__ == '__main__':\n    N = int(input())\n    l = []\n    while (N \u003e 0):\n        stringa = input().split()\n        if (stringa[0] == 'insert'):\n            i = int(stringa[1])\n            e = int(stringa[2])\n            l.insert(i,e)   \n        if (stringa[0] == 'print'):\n            print(l)\n        if (stringa[0] == 'remove'):\n            x = int(stringa[1])\n            for a in l:\n                if a==x:\n                    l.remove(a)\n        if (stringa[0] == 'append'):\n            a = int(stringa[1])\n            l.append(a)\n        if (stringa[0] == 'sort'):\n            l = sorted(l)\n        if (stringa[0] == 'pop'):\n            del l[-1]\n        if (stringa[0] == 'reverse'):\n            l.reverse()\n        N = N - 1\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Lists","code":"if __name__ == '__main__':\n    N = int(input())\n    l = []\n    while (N \u003e 0):\n        stringa = input().split()\n        if (stringa[0] == 'insert'):\n            i = int(stringa[1])\n            e = int(stringa[2])\n            l.insert(i,e)   \n        if (stringa[0] == 'print'):\n            print(l)\n        if (stringa[0] == 'remove'):\n            x = int(stringa[1])\n            for a in l:\n                if a==x:\n                    l.remove(a)\n                    break\n                    \n        if (stringa[0] == 'append'):\n            a = int(stringa[1])\n            l.append(a)\n        if (stringa[0] == 'sort'):\n            l = sorted(l)\n        if (stringa[0] == 'pop'):\n            del l[-1]\n        if (stringa[0] == 'reverse'):\n            l.reverse()\n        N = N - 1\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Tuples ","code":"if __name__ == '__main__':\n    n = int(input())\n    integer_list = map(int, input().split())\n    int_l = list(integer_list)\n    l = []\n    for x in range(n):\n        l.append(int_l[x])\n    print(hash(tuple(l)))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"sWAP cASE","code":"def swap_case(s):\n    return s.swapcase()\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"sWAP cASE","code":"def swap_case(s):\n    return s.swapcase()\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"String Split and Join","code":"\n\ndef split_and_join(line):\n    line = line.split(\" \")\n    new = \"-\".join(line)\n    return new\n\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"What's Your Name?","code":"#\n# Complete the 'print_full_name' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. STRING first\n#  2. STRING last\n#\n\ndef print_full_name(first, last):\n    print(\"Hello \" + first + \" \" +last +\"! You just delved into python.\")\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"What's Your Name?","code":"#\n# Complete the 'print_full_name' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. STRING first\n#  2. STRING last\n#\n\ndef print_full_name(first, last):\n    \n    print(\"Hello {} {}! You just delved into python.\".format(first, last))\n    #also\n    #print(\"Hello \" + first + \" \" +last +\"! You just delved into python.\")\n    #i think commas are also fine instead of the \"plus\" sign\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Mutations","code":"def mutate_string(string, position, character):\n    return string[:position] + character + string[position+1:]\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Mutations","code":"def mutate_string(string, position, character):\n    return string[:position] + character + string[position+1:]\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    c = 0\n    for x in range(0, len(string)):\n        if sub_string[0] == string[x] and (x+len(sub_string) \u003c= len(string)):\n            t = True\n            for y in range(0, len(sub_string)):\n                t = True\n                if (sub_string[y] != string[x+y]):\n                    t = False\n            if t: \n                c +=1\n                \n    return c\n\n","score":0.888888888889,"language":"pypy3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    c = 0\n    for x in range(0, len(string)):\n        if sub_string[0] == string[x] and (x+len(sub_string) \u003c= len(string)):\n            t = True\n            for y in range(0, len(sub_string)):\n                t = True\n                if (ord(sub_string[y]) != ord(string[x+y])):\n                    t = False\n            if t: \n                c +=1\n                \n    return c\n\n","score":0.888888888889,"language":"pypy3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    c = 0\n    for x in range(0, len(string)):\n        if sub_string[0] == string[x] and (x+len(sub_string) \u003c= len(string)):\n            t = True\n            for y in range(0, len(sub_string)):\n                if (ord(sub_string[y-1]) != ord(string[x+y])):\n                    t = False\n            if t: \n                c +=1\n                \n    return c\n\n","score":0.222222222222,"language":"pypy3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    c = 0\n    for x in range(0, len(string)):\n        if sub_string[0] == string[x] and (x+len(sub_string) \u003c= len(string)):\n            t = True\n            for y in range(0, len(sub_string)):\n                if (sub_string[y-1]) != string[x+y]:\n                    t = False\n            if t: \n                c +=1\n                \n    return c\n\n","score":0.222222222222,"language":"pypy3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    c = 0\n    for x in range(0, len(string)):\n        if sub_string[0] == string[x] and (x+len(sub_string) \u003c= len(string)):\n            t = True\n            for y in range(0, len(sub_string)):\n                if (sub_string[y]) != string[x+y]:\n                    t = False\n            if t: \n                c +=1\n                \n    return c\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    c = 0\n    for x in range(0, len(string)):\n        if sub_string[0] == string[x] and (x+len(sub_string) \u003c= len(string)):\n            t = True\n            for y in range(0, len(sub_string)):\n                if (ord(sub_string[y])) != ord(string[x+y]):\n                    t = False\n            if t: \n                c +=1\n                \n    return c\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    c = 0\n    for x in range(0, len(string)):\n        if sub_string[0] == string[x] and (x+len(sub_string) \u003c= len(string)):\n            t = True\n            for y in range(0, len(sub_string)):\n                if (ord(sub_string[y])) != ord(string[x+y]):\n                    t = False\n            if t: \n                c +=1\n                \n    return c\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"String Validators","code":"if __name__ == '__main__':\n    x = input()\n    isAlnum = False\n    isAlpha = False\n    isDigit = False\n    isLower = False\n    isUpper = False\n    for s in x:\n        if s.isalnum():\n            isAlnum = True\n        if s.isalpha():\n            isAlpha = True \n        if s.isdigit():\n            isDigit = True\n        if s.islower():\n             isLower = True \n        if s.isupper():\n            isUpper = True\n    print(isAlnum)\n    \n    print(isAlpha)\n    \n    print(isDigit)\n    \n    print(isLower)\n    \n    print(isUpper)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Text Alignment","code":"#Replace all ______ with rjust, ljust or center. \n\nthickness = int(input()) #This must be an odd number\nc = 'H'\n\n#Top Cone\nfor i in range(thickness):\n    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))\n\n#Top Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))\n\n#Middle Belt\nfor i in range((thickness+1)//2):\n    print((c*thickness*5).center(thickness*6))    \n\n#Bottom Pillars\nfor i in range(thickness+1):\n    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    \n\n#Bottom Cone\nfor i in range(thickness):\n    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Text Wrap","code":"\n\ndef wrap(string, max_width):\n    arr = textwrap.wrap(string,max_width)\n    return \"\\n\".join(arr) \n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Designer Door Mat","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nif __name__ == '__main__':\n    s = input()\n    n,m = map(int, s.split())\n    i = 1\n    j = n-2\n    while i \u003c n:\n        print((i*\".|.\").center(m,\"-\"))\n        i = i+2\n    print((\"WELCOME\").center(m,\"-\"))\n    while j \u003e 0:\n        print((j*\".|.\").center(m,\"-\"))\n        j = j -2\n    \n    \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"String Formatting","code":"def print_formatted(number):\n    for x in range(1,n+1):\n        dec = str(x)\n        octal = str(oct(x)[2:])\n        hexadecimal = str(hex(x)[2:]).upper()\n        binary = str(bin(x)[2:])\n        lend = len(bin(number)[2:])-len(dec)\n        leno = len(bin(number)[2:])-len(octal)\n        lenh = len(bin(number)[2:])-len(hexadecimal)\n        lenb = len(bin(number)[2:])-len(binary)\n        print(lend*\" \"+dec,leno*\" \"+octal,lenh*\" \"+hexadecimal,lenb*\" \"+binary)\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"String Formatting","code":"def print_formatted(number):\n    for x in range(1,n+1):\n        dec = str(x)\n        octal = str(oct(x)[2:])\n        hexadecimal = str(hex(x)[2:]).upper()\n        binary = str(bin(x)[2:])\n        lend = len(bin(number)[2:])-len(dec)\n        leno = len(bin(number)[2:])-len(octal)\n        lenh = len(bin(number)[2:])-len(hexadecimal)\n        lenb = len(bin(number)[2:])-len(binary)\n        print(lend*\" \"+dec,leno*\" \"+octal,lenh*\" \"+hexadecimal,lenb*\" \"+binary)\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Birthday Cake Candles","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'birthdayCakeCandles' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER_ARRAY candles as parameter.\n#\n\ndef birthdayCakeCandles(candles):\n   maxc = max(candles)\n   i = candles.count(maxc)\n   return i\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    candles_count = int(input().strip())\n\n    candles = list(map(int, input().rstrip().split()))\n\n    result = birthdayCakeCandles(candles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    a = 1\n    b = 1\n    while a!=b or x1!=x2:\n        x1 = x1 + v1\n        x2 = x2 + v2\n        a += 1\n        b += 1\n        if x1\u003e10000 or x2\u003e10000:\n            return \"NO\"\n    return \"YES\"\n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.783783783784,"language":"pypy3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    a = 1\n    b = 1\n    while a!=b or x1!=x2:\n        if x1\u003e10000 or x2\u003e10000:\n            return \"NO\"\n        x1 = x1 + v1\n        x2 = x2 + v2\n        a += 1\n        b += 1\n    return \"YES\"\n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.783783783784,"language":"pypy3"},{"contest":"Master","challenge":"Capitalize!","code":"\n\n# Complete the solve function below.\ndef solve(s):\n    arr = s.split()\n    for x in range(len(arr)):\n        arr[x] = arr[x].capitalize()\n    return \" \".join(arr)\n\n","score":0.2,"language":"pypy3"},{"contest":"Master","challenge":"Capitalize!","code":"\n\n# Complete the solve function below.\ndef solve(s):\n    arr = s.split(\" \")\n    for x in range(len(arr)):\n        arr[x] = arr[x].capitalize()\n    return \" \".join(arr)\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    print(\"Stuart\", stuart) if stuart\u003ekevin else print(\"Kevin\", kevin)\n    if stuart==kevin:\n        print(\"Draw\")\n        \n        \n\n","score":0.994206257242,"language":"pypy3"},{"contest":"Master","challenge":"Merge the Tools!","code":"def merge_the_tools(string, k):\n    arr = [string[i:i+k] for i in range(0, len(string), k)]\n    for parola in arr:\n        ricorrenze=[]\n        stri =''\n        for char in parola:\n            if char not in ricorrenze:\n                stri +=char\n            if (parola.count(char) \u003e 1):\n                ricorrenze.append(char)\n        print(stri)\n                    \n                \n    \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    print(stuart, kevin)\n    print(\"Stuart\", stuart) if stuart\u003ekevin else print(\"Kevin\", kevin)\n    if stuart==kevin:\n        print(\"Draw\")\n        \n        \n\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    print(\"Stuart\", stuart) if stuart\u003ekevin else print(\"Kevin\", kevin)\n    if stuart==kevin:\n        print(\"Draw\")\n        \n        \n\n","score":0.994206257242,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    print(\"Stuart\", stuart) if stuart\u003ekevin elif kevin\u003estuart print(\"Kevin\", kevin) elif print(\"Draw\")\n        \n        \n\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    \n    if stuart\u003ekevin:\n        print(\"Stuart\", stuart) \n    \n    elif kevin\u003estuart:\n        print(\"Kevin\", kevin) \n    \n    elif print(\"Draw\")\n        \n        \n\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    \n    if stuart\u003ekevin:\n        print(\"Stuart\", stuart) \n    elif kevin\u003estuart:\n        print(\"Kevin\", kevin) \n    elif print(\"Draw\")\n        \n        \n\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    \n    if stuart\u003ekevin:\n        print(\"Stuart\", stuart) \n    elif kevin\u003estuart:\n        print(\"Kevin\", kevin) \n    else: print(\"Draw\")\n        \n        \n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    \n    if stuart\u003ekevin:\n        print(\"Stuart\", stuart) \n    elif kevin\u003estuart:\n        print(\"Kevin\", kevin) \n    else: print(\"Draw\")\n        \n        \n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    \n    if stuart\u003ekevin:\n        print(\"Stuart\", stuart) \n    elif kevin\u003estuart:\n        print(\"Kevin\", kevin) \n    else: print(\"Draw\")\n        \n        \n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    stuart = 0\n    kevin = 0\n    arr = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    vow = []\n    con = []\n    for x in range(len(string)):\n        if string[x] in arr:\n            kevin += len(string)-x\n        else:\n            stuart += len(string)-x\n    \n    if stuart\u003ekevin:\n        print(\"Stuart\", stuart) \n    elif kevin\u003estuart:\n        print(\"Kevin\", kevin) \n    else: print(\"Draw\")\n        \n        \n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Introduction to Sets","code":"def average(array):\n    s = set(array)\n    x = sum(s)/len(s)\n    return round(x,3)\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"No Idea!","code":"if __name__ == '__main__':\n    n,m = map(int, input().split())\n    arr = input().split()\n    A = set(input().split())\n    B = set(input().split())\n    happy = 0\n    for x in arr:\n        if (x in A):\n            happy += 1\n        if (x in B):\n            happy -= 1\n    print(happy)\n         \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .add() ","code":"if __name__ == '__main__':\n    s = set()\n    n = int(input())\n    for x in range(0,n):\n        s.add(input())\n    print(len(s))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .discard(), .remove() \u0026 .pop()","code":"n = int(input())\ns = set(map(int, input().split()))\nn = int(input())\nfor x in range(n):\n    com = input().split()\n    if com[0] == \"discard\":\n        s.discard(int(com[1]))\n    elif com[0] == \"remove\":\n        s.remove(int(com[1]))\n    else:\n        s.pop()\nprint(sum(s))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Set .union() Operation","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(input())\ns1 = set(map(int, input().split()))\nm = int(input())\ns2 = set(map(int, input().split()))\nprint(len(s1.union(s2)))\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Set .intersection() Operation","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\nn = int(input())\ns1 = set(map(int, input().split()))\nm = int(input())\ns2 = set(map(int, input().split()))\nprint(len(s1.intersection(s2)))\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Set .difference() Operation","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(input())\ns1 = set(map(int, input().split()))\nm = int(input())\ns2 = set(map(int, input().split()))\nprint(len(s1.difference(s2)))\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Set .symmetric_difference() Operation","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\nn = int(input())\ns1 = set(map(int, input().split()))\nm = int(input())\ns2 = set(map(int, input().split()))\nprint(len(s1.symmetric_difference(s2)))\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Set Mutations","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nn = int(input())\nset1 = set(map(int, input().split()))\nnum = int(input())\nfor x in range(num):\n    com = input().split()\n    set2 = set(map(int, input().split()))\n    if com[0] == \"update\":\n        set1.update(set2)\n    if com[0] == \"intersection_update\":\n        set1.intersection_update(set2)\n    if com[0] == \"symmetric_difference_update\":\n        set1.symmetric_difference_update(set2)\n    if com[0] == \"difference_update\":\n        set1.difference_update(set2)\nprint(sum(set1))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(input())\narr = list(map(int, input().split()))\ns = set(arr)\nfor x in s:\n    if arr.count(x) == 1:\n        print(x)\n","score":0.293103448276,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(input())\narr = list(map(int, input().split()))\ns = set(arr)\nfor x in s:\n    a = 0\n    while a \u003c 2:\n        for y in arr:\n            if x==y:\n                a +=1\n        if a==1:\n            print(x)\n    \n","score":0.287356321839,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn = int(input())\narr = list(map(int, input().split()))\ns = set(arr)\nfor x in s:\n    a = 0\n    while a \u003c 2:\n        for y in arr:\n            if x==y:\n                a +=1\n        if a==1:\n            print(x)\n    arr.remove(x)\n    \n","score":0.287356321839,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n#easy way: dictionary\n#but since this is in the category of sets i will try to use them without going in runtime error\nn = int(input())\narr = list(map(int, input().split()))\ns = set(arr)\nfor x in s:\n    if arr.count(x) == 1:\n        print(x)\n    \n    \n","score":0.293103448276,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n#easy way: dictionary\n#but since this is in the category of sets i will try to use them without going in runtime error\nn = int(input())\narr = list(map(int, input().split()))\ns = set(arr)\nl = []\nfor x in s:\n    l.append(arr.count(x))\nprint(min(l))\n\n    \n    \n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n#easy way: dictionary\n#but since this is in the category of sets i will try to use them without going in runtime error\nn = int(input())\narr = list(map(int, input().split()))\ns = set(arr)\nl = []\nfor x in s:\n    l.append(arr.count(x))\nprint(l)\n\n    \n    \n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n#easy way: dictionary\n#but since this is in the category of sets i will try to use them without going in runtime error\nn = int(input())\narr = list(map(int, input().split()))\ns = set(arr)\n\nfor x in s:\n    if arr.count(x)==1:\n        print(x)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"The Captain's Room ","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n#easy way: dictionary\n#but since this is in the category of sets i will try to use them without going in runtime error\nn = int(input())\narr = list(map(int, input().split()))\ndic = {}\nfor x in arr:\n    if x not in dic:\n        dic[x] = 1\n    else:\n        dic[x] += 1\n        \nfor x in dic.keys():\n    if dic[x] == 1:\n        print(x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Symmetric Difference","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nM = int(input())\nset1 = set(map(int,input().split()))\nN = int(input())\nset2 = set(map(int,input().split()))\n\nset3 = set1.difference(set2)\nset4 = set2.difference(set1)\nset5 = set3.union(set4)\n\n\nfor x in sorted(set5):\n    print(x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Check Subset","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nnt = int(input())\n\nfor x in range(nt):\n    nA = int(input())\n    sA = set(map(int, input().split()))\n    nB = int(input())\n    sB = set(map(int, input().split()))\n    if len(sB.difference(sA)) == (nB-nA):\n        print(True)\n    else:\n        print(False)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Check Strict Superset","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nsA = set(map(int, input().split()))\nnSet = int(input())\nbool = True\n\nfor x in range(nSet):\n    set1 = set(map(int, input().split()))\n    if not set1.issubset(sA):\n        bool = False\n        break\nprint(bool)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Check Subset","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nnt = int(input())\n\nfor x in range(nt):\n    nA = int(input())\n    sA = set(map(int, input().split()))\n    nB = int(input())\n    sB = set(map(int, input().split()))\n    print(sA.issubset(sB))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Check Subset","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nnt = int(input())\n\nfor x in range(nt):\n    nA = int(input())\n    sA = set(map(int, input().split()))\n    nB = int(input())\n    sB = set(map(int, input().split()))\n    print(sA.issubset(sB))\n    \n    #without using issubset\n    #if len(sB.difference(sA)) == (nB-nA):\n    #    print(True)\n    #else:\n    #    print(False)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"collections.Counter()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import Counter\nX = int(input())\nl = list(map(int, input().split()))\ncounter = Counter(l)\nc = int(input())\nmoney = 0\nfor x in range(c):\n    s,p = map(int, input().split())\n    if counter[s] != 0:\n        money += p\n        counter[s] -= 1\nprint(money)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"DefaultDict Tutorial","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import defaultdict\n\nd = defaultdict(list)\nn,m = map(int, input().split())\nfor x in range(n):\n    word = input()\n    d[word].append(x+1)\nfor y in range(m):\n    word = input()\n    for j in d[word]:\n        print(j, end=\" \")\n    print(\"\")\n","score":0.222222222222,"language":"pypy3"},{"contest":"Master","challenge":"DefaultDict Tutorial","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import defaultdict\n\nd = defaultdict(list)\nn,m = map(int, input().split())\nfor x in range(n):\n    word = input()\n    d[word].append(x+1)\nfor y in range(m):\n    word = input()\n    for j in d[word]:\n        print(j, end=\" \") or -1\n    print(\"\")\n","score":0.222222222222,"language":"pypy3"},{"contest":"Master","challenge":"DefaultDict Tutorial","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import defaultdict\n\nd = defaultdict(list)\nn,m = map(int, input().split())\nfor x in range(n):\n    word = input()\n    d[word].append(str(x+1))\nfor y in range(m):\n    word = input()\n    if word in d:\n        print(' '.join(d[word]))\n    else:\n        print(\"-1\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Collections.namedtuple()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import namedtuple\n\nn = int(input())\ncol_name = input().split()\nInfo = namedtuple('Info',[col_name[0],col_name[1],col_name[2],col_name[3]])\nmarks = 0\nfor x in range(n):\n    row = input().split()\n    r = Info(row[0],row[1],row[2],row[3],)\n    marks += int(r.MARKS)\nprint(marks/n)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Collections.OrderedDict()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import OrderedDict\n\nn = int(input())\nd = OrderedDict()\nfor x in range(n):\n    s = input().split()\n    price = int(s[-1])\n    del s[-1]\n    name = \" \".join(s)\n    if name not in d.keys():\n        d[name] = price\n    else:\n        d[name] += price\n    \n\nfor key, price in d.items():\n    print(key, price)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Word Order","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom collections import OrderedDict\n\nn = int(input())\nd = OrderedDict()\nfor x in range(n):\n    s = input()\n    if s not in d.keys():\n        d[s] = 1\n    else:\n        d[s] += 1\nprint(len(d.keys()))\nprint(\" \".join(map(str, d.values())))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Collections.deque()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import deque\n\nn = int(input())\nd = deque()\nfor x in range(n):\n    s = input().split()\n    if s[0] == \"append\":\n        d.append(int(s[1]))\n    elif s[0] == \"appendleft\":\n        d.appendleft(int(s[1]))\n    elif s[0] == \"pop\":\n        d.pop()\n    else:\n        d.popleft()\nprint(\" \".join(map(str, d)))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Piling Up!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import deque\n\n\nb = True\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    d =deque(map(int, input().split()))\n    if d[0] \u003e d[-1]:\n        m = d[0]\n        d.popleft()\n    else:\n        m = d[-1]\n        d.pop()\n    while b and len(d)\u003e0:\n        if m \u003e= d[0] and d[0] \u003e= d[-1]:\n            m = d[0]\n            d.popleft()\n        elif m \u003e= d[-1] and d[-1] \u003e= d[0]:\n            m = d[-1]\n            d.pop()\n        else:\n            b = False\n    print(\"Yes\") if b else print(\"No\")\n    \n    \n    \n","score":0.25,"language":"pypy3"},{"contest":"Master","challenge":"Piling Up!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import deque\n\n\nb = True\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    d =deque(map(int, input().split()))\n    if d[0] \u003e d[-1]:\n        m = d[0]\n        d.popleft()\n    else:\n        m = d[-1]\n        d.pop()\n    while b and len(d)\u003e0:\n        print(m)\n        if m \u003e= d[0] and d[0] \u003e= d[-1]:\n            m = d[0]\n            d.popleft()\n            print(d)\n        elif m \u003e= d[-1] and d[-1] \u003e= d[0]:\n            m = d[-1]\n            d.pop()\n            print(d)\n        else:\n            b = False\n    print(\"Yes\") if b else print(\"No\")\n    \n    \n    \n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Piling Up!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import deque\n\n\nb = True\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    d =deque(map(int, input().split()))\n    if d[0] \u003e d[-1]:\n        m = d[0]\n        d.popleft()\n    else:\n        m = d[-1]\n        d.pop()\n    while b and len(d)\u003e0:\n        if m \u003e= d[0] and d[0] \u003e= d[-1]:\n            m = d[0]\n            d.popleft()\n        elif m \u003e= d[-1] and d[-1] \u003e= d[0]:\n            m = d[-1]\n            d.pop()\n        else:\n            b = False\n    print(\"Yes\") if b else print(\"No\")\n    \n    \n    \n","score":0.25,"language":"pypy3"},{"contest":"Master","challenge":"Piling Up!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import deque\n\n\nb = True\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    d =deque(map(int, input().split()))\n    if d[0] \u003e d[-1]:\n        m = d[0]\n        d.popleft()\n    else:\n        m = d[-1]\n        d.pop()\n    while b and len(d)\u003e0:\n        if m \u003e= d[0] and d[0] \u003e= d[-1]:\n            m = d[0]\n            d.popleft()\n        elif m \u003e= d[-1] and d[-1] \u003e= d[0]:\n            m = d[-1]\n            d.pop()\n        else:\n            b = False\n    print(\"Yes\") if len(d)==0 else print(\"No\")\n    \n    \n    \n","score":0.25,"language":"pypy3"},{"contest":"Master","challenge":"Piling Up!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom collections import deque\n\n\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    d =deque(map(int, input().split()))\n    if d[0] \u003e d[-1]:\n        m = d[0]\n        d.popleft()\n    else:\n        m = d[-1]\n        d.pop()\n    for x in range(n-1):\n        if m \u003e= d[0] and d[0] \u003e= d[-1]:\n            m = d[0]\n            d.popleft()\n        elif m \u003e= d[-1] and d[-1] \u003e d[0]:\n            m = d[-1]\n            d.pop()\n    print(\"Yes\") if len(d)==0 else print(\"No\")\n    \n    \n    \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Company Logo","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef find_max(l):\n    c = \"\"\n    max = 0\n    for x in l:\n        if x[1] \u003e max:\n            max = x[1]\n            c = x[0]\n        if x[1] == max:\n            if x[0] \u003c c:\n                max = x[1]\n                c = x[0]\n    print(c, max)\n    return c, max\n    \n\n\nif __name__ == '__main__':\n    s = input()\n    #i use the dictionary to count the occurence\n    dic ={}\n    for x in s:\n        if x not in dic:\n            dic[x] = 1\n        else:\n            dic[x] += 1\nfor x in range(3):\n    l = list(dic.items())\n    c, max = find_max(l)\n    dic.pop(c)\n\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Calendar Module","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport calendar\ndic = {'0':'MONDAY','1':'TUESDAY','2':'WEDNESDAY','3':'THURSDAY','4':'FRIDAY','5':'SATURDAY','6':'SUNDAY'}\nm, d, y = map(int,input().split())\nday = calendar.weekday(y,m,d)\nprint(dic[str(day)])\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Calendar Module","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport calendar\ndic = {'0':'MONDAY','1':'TUESDAY','2':'WEDNESDAY','3':'THURSDAY','4':'FRIDAY','5':'SATURDAY','6':'SUNDAY'}\nm, d, y = map(int,input().split())\nday = calendar.weekday(y,m,d)\nprint(dic[str(day)])\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Exceptions","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nT = int(input())\n\n\nfor x in range(T):\n    a,b = input().split()\n    try:\n        print(int(a)//int(b))\n    except ZeroDivisionError as e:\n        print(\"Error Code:\",e)\n    except ValueError as e:\n        print(\"Error Code:\", e)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Zipped!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn,x = map(int, input().split())\nl = []\nfor a in range(x):\n    riga = list(map(float, input().split()))\n    print(riga)\n    l.append(zip(riga))\nX = []\nfor b in l:\n    X += [b]\nprint(zip(*X))\nfor x in range(n):\n    print(sum(list(X[x]))/x)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Zipped!","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nn,x = map(int, input().split())\nl = []\nfor a in range(x):\n    riga = list(map(float, input().split()))\n    l.append(list(riga))\nX = []\nfor b in l:\n    X += [b]\nsv = list(zip(*X))\nfor y in range(n):\n    a = x\n    b = sum(list(sv[y]))\n    print(b/x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Input()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nx, k = map(int, input().split())\ns = input()\nif k == eval(s):\n    print(True)\nelse:\n    print(False)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Input()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nx, k = map(int, input().split())\ns = input()\n\n#with the eval function it will stransform every string in an expression, and if there are any variables it will transform those as well and take the value of the variable if we declared (x,k = map(int,input().split()))\nif k == eval(s):\n    print(True)\nelse:\n    print(False)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"ginortS","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef sort_letters(s):\n    s2 = \"\".join(sorted(s))\n    while s2[0].isupper():\n        s2 += s2[0]\n        s2 = s2.replace(s2[0],'',1)\n    return s2\n\ndef sort_digits(d):\n    odd =[]\n    even = []\n    s = ''\n    for x in d:\n        if x%2==0:\n            even.append(x)\n        else:\n            odd.append(x)\n    for x in odd:\n        s += str(x)\n    for x in even:\n        s += str(x)\n    return s\n    \ns = input()\nletters = ''\ndigits = []\nfor x in s:\n    if x.isalpha():\n        letters += x\n    else:\n        digits.append(int(x))\nletters_ord = sort_letters(letters)\ndigits_ord = sort_digits(digits)\nprint(letters_ord+digits_ord)\n","score":0.2,"language":"pypy3"},{"contest":"Master","challenge":"ginortS","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef sort_letters(s):\n    s2 = \"\".join(sorted(s))\n    while s2[0].isupper():\n        s2 += s2[0]\n        s2 = s2.replace(s2[0],'',1)\n    return s2\n\ndef sort_digits(d):\n    odd =[]\n    even = []\n    s = ''\n    for x in d:\n        if x%2==0:\n            even.append(x)\n        else:\n            odd.append(x)\n    for x in odd:\n        s += str(x)\n    for x in even:\n        s += str(x)\n    return s\n    \ns = input()\nletters = ''\ndigits = []\nfor x in s:\n    if x.isalpha():\n        letters += x\n    else:\n        digits.append(int(x))\nletters_ord = sort_letters(letters)\ndigits_ord = sort_digits(digits)\nprint(letters_ord+digits_ord)\n","score":0.2,"language":"pypy3"},{"contest":"Master","challenge":"ginortS","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef sort_letters(s):\n    s2 = \"\".join(sorted(s))\n    while s2[0].isupper():\n        s2 += s2[0]\n        s2 = s2.replace(s2[0],'',1)\n    return s2\n\ndef sort_digits(d):\n    odd =[]\n    even = []\n    s = ''\n    for x in d:\n        if x%2==0 or x == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    for x in odd:\n        s += str(x)\n    for x in even:\n        s += str(x)\n    return s\n    \ns = input()\nletters = ''\ndigits = []\nfor x in s:\n    if x.isalpha():\n        letters += x\n    else:\n        digits.append(int(x))\nletters_ord = sort_letters(letters)\ndigits_ord = sort_digits(digits)\nprint(letters_ord+digits_ord)\n","score":0.2,"language":"pypy3"},{"contest":"Master","challenge":"ginortS","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\ndef sort_letters(s):\n    s2 = \"\".join(sorted(s))\n    while s2[0].isupper():\n        s2 += s2[0]\n        s2 = s2.replace(s2[0],'',1)\n    return s2\n\ndef sort_digits(d):\n    odd =[]\n    even = []\n    s = ''\n    for x in d:\n        if x%2==0 or x == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    for x in odd:\n        s += str(x)\n    for x in even:\n        s += str(x)\n    return s\n    \ns = input()\nletters = ''\ndigits = []\nfor x in s:\n    if x.isalpha():\n        letters += x\n    else:\n        digits.append(int(x))\nletters_ord = sort_letters(letters)\ndigits.sort()\ndigits_ord = sort_digits(digits)\nprint(letters_ord+digits_ord)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"ginortS","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n#i could have used the regex to make it way smaller, but since they are of a later class i tried not to use them\ndef sort_letters(s):\n    s2 = \"\".join(sorted(s))\n    while s2[0].isupper():\n        s2 += s2[0]\n        s2 = s2.replace(s2[0],'',1)\n    return s2\n\ndef sort_digits(d):\n    odd =[]\n    even = []\n    s = ''\n    for x in d:\n        if x%2==0 or x == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    for x in odd:\n        s += str(x)\n    for x in even:\n        s += str(x)\n    return s\n    \ns = input()\nletters = ''\ndigits = []\nfor x in s:\n    if x.isalpha():\n        letters += x\n    else:\n        digits.append(int(x))\nletters_ord = sort_letters(letters)\ndigits.sort()\ndigits_ord = sort_digits(digits)\nprint(letters_ord+digits_ord)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"ginortS","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n#i could have used the regex to make it way smaller, but since they are of a later class i tried not to use them\ndef sort_letters(s):\n    s2 = \"\".join(sorted(s))\n    while s2[0].isupper():\n        s2 += s2[0]\n        s2 = s2.replace(s2[0],'',1)\n    return s2\n\ndef sort_digits(d):\n    odd =[]\n    even = []\n    s = ''\n    for x in d:\n        if x%2==0 or x == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    for x in odd:\n        s += str(x)\n    for x in even:\n        s += str(x)\n    return s\n    \ns = input()\nletters = ''\ndigits = []\nfor x in s:\n    if x.isalpha():\n        letters += x\n    else:\n        digits.append(int(x))\nletters_ord = sort_letters(letters)\ndigits.sort()\ndigits_ord = sort_digits(digits)\nprint(letters_ord+digits_ord)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Map and Lambda Function","code":"cube = lambda x: x**3\n\ndef fibonacci(n):\n    l = [0,1]\n    a= 0\n    b = 1\n    for x in range(n - len(l)):\n        l.append(a+b)\n        a = b\n        b = l[-1]\n    return l\n        \n\n","score":0.75,"language":"pypy3"},{"contest":"Master","challenge":"Map and Lambda Function","code":"cube = lambda x: x**3\n\ndef fibonacci(n):\n    l = [0,1]\n    a= 0\n    b = 1\n    for x in range(n - len(l)):\n        l.append(a+b)\n        a = b\n        b = l[-1]\n    return l\n        \n\n","score":0.75,"language":"pypy3"},{"contest":"Master","challenge":"Map and Lambda Function","code":"cube = lambda x: x**3\n\ndef fibonacci(n):\n    l = [0]\n    a= 0\n    b = 1\n    if n\u003e=1:\n        l.append(b)\n    for x in range(n - len(l)):\n        l.append(a+b)\n        a = b\n        b = l[-1]\n    return l\n        \n\n","score":0.75,"language":"pypy3"},{"contest":"Master","challenge":"Map and Lambda Function","code":"cube = lambda x: x**3\n\ndef fibonacci(n):\n    l = []\n    a= 0\n    b = 1\n    if n\u003e=0:\n        l.append(a)\n    if n\u003e=1:\n        l.append(b)\n    for x in range(n - len(l)):\n        l.append(a+b)\n        a = b\n        b = l[-1]\n    return l\n        \n\n","score":0.75,"language":"pypy3"},{"contest":"Master","challenge":"Map and Lambda Function","code":"cube = lambda x: x**3\n\ndef fibonacci(n):\n    l = []\n    a= 0\n    b = 1\n    if n\u003e=1:\n        l.append(a)\n    for x in range(n - len(l)):\n        l.append(a+b)\n        a = b\n        b = l[-1]\n    return l\n        \n\n","score":0.375,"language":"pypy3"},{"contest":"Master","challenge":"Map and Lambda Function","code":"cube = lambda x: x**3\n\ndef fibonacci(n):\n    l = []\n    a = 0\n    b = 1\n    if n\u003e=1:\n        l.append(a)\n    for x in range(n - len(l)):\n        l.append(a+b)\n        a = l[x]\n        b = l[x+1]\n    return l\n        \n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"XML 1 - Find the Score","code":"\n\ndef get_attr_number(node):\n    l = len(node.attrib)\n    for x in node:\n        l += len(x.attrib)\n    return l\n        \n        \n","score":0.375,"language":"pypy3"},{"contest":"Master","challenge":"XML 1 - Find the Score","code":"\n\ndef get_attr_number(node):\n    l = len(node.attrib)\n    for x in node:\n        l += get_attr_number(x)\n    return l\n        \n        \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"XML2 - Find the Maximum Depth","code":"\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    level += 1\n    if level \u003e maxdepth:\n        maxdepth = level\n    for x in elem:\n        depth(x, level)\n        \n    \n            \n        \n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Standardize Mobile Number Using Decorators","code":"def wrapper(f):\n    def fun(l):\n        nl= []\n        for x in l:\n            if len(x)\u003e= 10:\n                if len(x) == 11:\n                    x = \"+91\" + x[1:]\n                if len(x) == 12:\n                    x = \"+91\" + x[2:]\n                if len(x) == 10:\n                    x = \"+91\" + x\n                nl.append(\" \".join([x[:3],x[3:8],x[8:]]))\n        l = f(nl)\n    return fun\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Decorators 2 - Name Directory","code":"\nfrom operator import itemgetter\nfrom itertools import groupby\ndef person_lister(f):\n    def inner(people):\n        for x in people:\n            people.sort(key=itemgetter(2))\n            return map(f,people)\n    return inner\n\n","score":0.727272727273,"language":"python3"},{"contest":"Master","challenge":"Decorators 2 - Name Directory","code":"\nfrom operator import itemgetter\nfrom itertools import groupby\ndef person_lister(f):\n    def inner(people):\n        people.sort(key=itemgetter(2))\n        return map(f,people)\n    return inner\n\n","score":0.727272727273,"language":"python3"},{"contest":"Master","challenge":"Decorators 2 - Name Directory","code":"\nfrom operator import itemgetter\nfrom itertools import groupby\ndef person_lister(f):\n    def inner(people):\n        for x in people:\n            x[2] = int(x[2])\n        people.sort(key=itemgetter(2))\n        return map(f,people)\n    return inner\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arrays","code":"\n\ndef arrays(arr):\n    a = numpy.array(arr,float)\n    return numpy.flip(a)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Shape and Reshape","code":"import numpy\n\n\n\narr = input().split()\nnArr = numpy.array(arr,int)\nnArr.shape = (3,3)\nprint(nArr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Transpose and Flatten","code":"import numpy\n\n\n\nn,m = map(int,input().split())\narr = []\nfor x in range(m):\n    arr.append([x for x in map(int, input().split())])\nnArr = numpy.array(arr, int)\nprint(numpy.transpose(nArr))\nprint(nArr.flatten())\n","score":0.5,"language":"python3"},{"contest":"Master","challenge":"Transpose and Flatten","code":"import numpy\n\n\n\nn,m = map(int,input().split())\narr = []\nfor x in range(n):\n    arr.append([x for x in map(int, input().split())])\nnArr = numpy.array(arr, int)\nprint(numpy.transpose(nArr))\nprint(nArr.flatten())\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Concatenate","code":"import numpy\n\n\n\nn,m,p = map(int, input().split())\nN =[([int(x) for x in input().split()] ) for i in range(n)]\nP =[([int(x) for x in input().split()] ) for i in range(m)]\nN = numpy.array(N)\nP = numpy.array(P)\nx = numpy.concatenate((N,P))\nprint(x)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Zeros and Ones","code":"import numpy\n\n\na,b,c = map(int, input().split())\none = []\nzero = []\nfor x in range(a):\n    one.append(numpy.ones((b,c), dtype=numpy.int))\n\nfor x in range(a):\n    zero.append(numpy.zeros((b,c), dtype=numpy.int))\n\nprint(numpy.array(zero))\nprint(numpy.array(one))\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Zeros and Ones","code":"import numpy\n\n\na = list(map(int, input().split()))\nprint(numpy.zeros(a, dtype = int))\nprint(numpy.ones(a, dtype= int))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Eye and Identity","code":"import numpy\nnumpy.set_printoptions(legacy='1.13')\n\n\nn,m = map(int, input().split())\nprint(numpy.eye(n,m,k=0))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Array Mathematics","code":"import numpy\n\n\n\nn,m = map(int, input().split())\na = numpy.array([tuple([int(x) for x in input().split()]) for i in range(n)])\nb = numpy.array([tuple([int(x) for x in input().split()]) for i in range(n)])\nprint(numpy.add(a,b))\nprint(numpy.subtract(a,b))\nprint(numpy.multiply(a,b))\nprint(a//b)\nprint(numpy.mod(a,b))\nprint(numpy.power(a,b))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Floor, Ceil and Rint","code":"import numpy\n\nnumpy.set_printoptions(legacy='1.13')\n\narr = list(map(float, input().split()))\nnArr = numpy.array(arr)\n\nprint(numpy.floor(nArr))\nprint(numpy.ceil(nArr))\nprint(numpy.rint(nArr))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sum and Prod","code":"import numpy\n\n\n\nn,m = map(int,input().split())\n\nnArr = [numpy.array([int(x) for x in input().split()]) for i in range(m)]\nprint(numpy.prod(numpy.sum(nArr, axis=0)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Min and Max","code":"import numpy\n\n\n\nn,m = map(int, input().split())\n\narr = [numpy.array([int(x) for x in input().split()]) for i in range(n)]\nprint(numpy.max(numpy.min(arr, axis=1)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mean, Var, and Std","code":"import numpy\n\n\n\nn,m = map(int, input().split())\n\narr = [numpy.array([int(x) for x in input().split()]) for x in range(n)]\n\nprint(numpy.mean(arr, axis = 1))\nprint(numpy.var(arr, axis = 0))\nprint(round(numpy.std(arr, axis = None), 11))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Dot and Cross","code":"import numpy as np\n\n\n\nn = int(input())\n\narrA = [np.array([int(x) for x in input().split()]) for _ in range(n)]\narrB = [np.array([int(x) for x in input().split()]) for x in range(n)]\n\nprint(np.dot(arrA,arrB))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Inner and Outer","code":"import numpy as np\n\n\n\narrA = np.array(list(map(int, input().split())))\narrB = np.array(list(map(int, input().split())))\n\nprint(np.inner(arrA, arrB))\nprint(np.outer(arrA, arrB))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Polynomials","code":"import numpy as np\n\n\n\nP = np.array(list(map(float, input().split())))\nx = int(input())\nprint(np.polyval(P,x))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Linear Algebra","code":"import numpy as np\n\n\n\nn = int(input())\narr = [np.array([float(x) for x in input().split()]) for x in range(n)]\n\nprint(round(np.linalg.det(arr),2))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (x2 \u003e x1 and v2 \u003e v1) or (x1 \u003e x2 and v1 \u003e v2):\n        return \"NO\"\n    elif (x1+v1) \u003e= (x2 + v2) and (x1+v1)%(x2+v2) == 0:\n                return \"YES\"\n    elif (x1+v1) \u003c (x2 + v2) and (x2+v2)%(x1+v1) == 0:\n                return \"YES\"\n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.108108108108,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (x2 \u003e x1 and v2 \u003e v1) or (x1 \u003e x2 and v1 \u003e v2):\n        return \"NO\"\n    elif (x1+v1) \u003e= (x2 + v2) and (x1+v1)%(x2+v2) == 0:\n                return \"YES\"\n    elif (x1+v1) \u003c (x2 + v2) and (x2+v2)%(x1+v1) == 0:\n                return \"YES\"\n    else:\n        return \"NO\"\n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.702702702703,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (x2 \u003e x1 and v2 \u003e v1) or (x1 \u003e x2 and v1 \u003e v2):\n        return \"NO\"\n    elif (x1+v1) \u003e= (x2 + v2) and (x1+v1)%(x2+v2) == 1:\n                return \"YES\"\n    elif (x1+v1) \u003c (x2 + v2) and (x2+v2)%(x1+v1) == 1:\n                return \"YES\"\n    else:\n        return \"NO\"\n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.675675675676,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (x2 \u003e x1 and v2 \u003e v1) or (x1 \u003e x2 and v1 \u003e v2):\n        return \"NO\"\n    elif ((x2-x1)%(v1-v2) == 0):\n        return \"YES\"\n        \n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.405405405405,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (x2 \u003e x1 and v2 \u003e v1) or (x1 \u003e x2 and v1 \u003e v2):\n        return \"NO\"\n    elif ((x2-x1)%(v1-v2) == 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n        \n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.72972972973,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (x2 \u003e x1 and v2 \u003e v1) or (x1 \u003e x2 and v1 \u003e v2):\n        return \"NO\"\n    elif ((x2-x1)%(v1-v2) == 0) and v1 != v2:\n        return \"YES\"\n    else:\n        return \"NO\"\n        \n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.72972972973,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (x2 \u003e x1 and v2 \u003e v1) or (x1 \u003e x2 and v1 \u003e v2):\n        return \"NO\"\n    elif v1 != v2 and ((x2-x1)%(v1-v2) == 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n        \n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (x2 \u003e x1 and v2 \u003e v1) or (x1 \u003e x2 and v1 \u003e v2):\n        return \"NO\"\n    elif v1 != v2 and ((x2-x1)%(v1-v2) == 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n        \n    \n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Viral Advertising","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'viralAdvertising' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n as parameter.\n#\n\na = [5]\n\ndef viralAdvertising(n):\n    global a\n    if n == 1:\n        return 5\n    return viralAdvertising(n) + math.floor(viralAdvertising(n-1)/2)\n\n    \n    \n    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    result = viralAdvertising(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Viral Advertising","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'viralAdvertising' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n as parameter.\n#\n\ndef a(n):\n    if n==1:\n        return(math.floor(5/2), math.floor(5/2))\n    b = a(n-1)\n    return (b[0] + math.floor(b[1]*3/2), math.floor(b[1]*3/2))\n\ndef viralAdvertising(n):\n    x,y = a(n)\n    return x\n   \n    \n    \n    \n    \n    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    result = viralAdvertising(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\ndef findSuperDigit(x,k):\n    if int(x) \u003e 10:\n        s = []\n        s[:0] = x\n        return findSuperDigit(str(sum(map(int, s))), k-1)\n    if int(x) \u003c= 10 or k == 1:\n        return int(x)\n        \ndef superDigit(n, k):\n    x = n*k\n    x = findSuperDigit(x,k)\n    return x\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n    \n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\ndef findSuperDigit(x,k):\n    if int(x) \u003c= 10 or k == 1:\n        return int(x)\n    if int(x) \u003e 10:\n        s = []\n        s[:0] = x\n        return findSuperDigit(str(sum(map(int, s))), k-1)\n        \ndef superDigit(n, k):\n    x = n*k\n    x = findSuperDigit(x,k)\n    return x\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n    \n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\ndef findSuperDigit(x,k):\n    s = []\n    s[:0] = x\n    somma = str(sum(map(int, s)))\n    if int(x) \u003c= 10 or k == 0:\n        return int(x)\n    if int(x) \u003e 10:\n        return findSuperDigit(somma, k-1)\n        \ndef superDigit(n, k):\n    x = n*k\n    x = findSuperDigit(x,k)\n    return x\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n    \n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\ndef findSuperDigit(x,k):\n    s = []\n    s[:0] = x\n    somma = str(sum(map(int, s)))\n    if int(x) \u003c= 10 or k == 0:\n        return int(somma)\n    if int(x) \u003e 10:\n        return findSuperDigit(somma, k-1)\n        \ndef superDigit(n, k):\n    x = n*k\n    x = findSuperDigit(x,k)\n    return x\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n    \n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\ndef findSuperDigit(x,k):\n    s = []\n    s[:0] = x\n    somma = str(sum(map(int, s)))\n    if int(x) \u003c= 10 or k == 1:\n        return int(somma)\n    else:\n        return findSuperDigit(somma, k-1)\n        \ndef superDigit(n, k):\n    x = n*k\n    x = findSuperDigit(x,k)\n    return x\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n    \n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Decorators 2 - Name Directory","code":"\n\nfrom operator import itemgetter\n\ndef person_lister(f):\n    def inner(people):\n        people.sort(key=itemgetter(2))\n        return map(f, people)\n    return inner\n\n","score":0.727272727273,"language":"pypy3"},{"contest":"Master","challenge":"Insertion Sort - Part 1","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'insertionSort1' function below.\n#\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER_ARRAY arr\n#\n\n\ndef insertionSort1(n, arr):\n    e = arr[-1]\n    prec = arr[-2]\n    while e \u003c prec:\n        arr[n-1] = prec\n        n -= 1\n        prec = arr[n-2]\n        print(\" \".join(map(str, arr)))\n    arr[n-1] = e\n    print(\" \".join(map(str, arr)))\n\nif __name__ == '__main__':\n    n = int(input().strip())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    insertionSort1(n, arr)\n","score":0.75,"language":"pypy3"},{"contest":"Master","challenge":"Insertion Sort - Part 1","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'insertionSort1' function below.\n#\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER_ARRAY arr\n#\n\n\ndef insertionSort1(n, arr):\n    e = arr[-1]\n    prec = arr[-2]\n    while e \u003c prec and n\u003e1:\n        arr[n-1] = prec\n        n -= 1\n        prec = arr[n-2]\n        print(\" \".join(map(str, arr)))\n    arr[n-1] = e\n    print(\" \".join(map(str, arr)))\n\nif __name__ == '__main__':\n    n = int(input().strip())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    insertionSort1(n, arr)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Insertion Sort - Part 2","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'insertionSort2' function below.\n#\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. INTEGER_ARRAY arr\n#\n\ndef insertionSort2(n, arr):\n    for x in range(n-1):\n        a = x\n        while arr[a] \u003e arr[a+1] and a \u003e= 0 and a \u003c n-1:\n            arr[a], arr[a+1] = arr[a+1], arr[a]\n            a -= 1\n        print(\" \".join(map(str, arr)))\n            \n\nif __name__ == '__main__':\n    n = int(input().strip())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    insertionSort2(n, arr)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\n\ndef calcola(s):\n    while s \u003e 10:\n        s = sum(map(int,list(str(s))))\n    return s\n\ndef superDigit(n, k):\n    s = sum(map(int, list(n*k)))\n    return calcola(s)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n\n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.444444444444,"language":"pypy3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\n\ndef superDigit(n, k):\n    s = sum(map(int, list(n*k)))\n    if s \u003e 10:\n        s = superDigit(str(s), 1)\n    return s\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n\n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.444444444444,"language":"pypy3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\n\ndef superDigit(n, k):\n    s = sum(map(int, list(n)))*k\n    if s \u003e 10:\n        s = superDigit(str(s), 1)\n    return s\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n\n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\n\ndef superDigit(n, k):\n    s = sum(map(int, list(n)))*k\n    if s \u003e 10:\n        s = superDigit(str(s), 1)\n    return s\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n\n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Detect Floating Point Number","code":"import re\nn = int(input())\nfor x in range(n):\n    if re.match(\"^-|\\.|\\+[0-9]*\\.[0-9]+$\", input()):\n        print(True)\n    else:\n        print(False)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Detect Floating Point Number","code":"import re\nn = int(input())\nfor x in range(n):\n    if re.match(\"^[+,-]?[0-9]*\\.+[0-9]+$\", input()):\n        print(True)\n    else:\n        print(False)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Detect Floating Point Number","code":"import re\nn = int(input())\nfor x in range(n):\n    if re.match(\"^[+,-]?[0-9]*\\.+[0-9]+$\", input()):\n        print(True)\n    else:\n        print(False)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Re.split()","code":"regex_pattern = r\"[,\\.]\"\t# Do not delete 'r'.\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Group(), Groups() \u0026 Groupdict()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\n\ns = input()\nr = re.match(\"([A-Za-z0-9]).{2}\",s)\nprint(r.group(1))\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Group(), Groups() \u0026 Groupdict()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\n\ns = input()\nm = re.search(r\"([a-zA-Z0-9])\\1+\",s)\n\nif m:\n    print(m.group(1))\nelse:\n    print(-1)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Group(), Groups() \u0026 Groupdict()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\n\ns = input()\nm = re.search(r\"([a-zA-Z0-9])\\1+\",s)\n\nif m:\n    print(m.group(1))\nelse:\n    print(-1)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Re.findall() \u0026 Re.finditer()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\ns= input()\n\nm = re.findall(r\"(?\u003c=[^aeiouAEIOU])([aeiouAEIOU]{2,})(?=[^aeiouAEIOU])\", s)\nfor x in m:\n    print(x)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Re.findall() \u0026 Re.finditer()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\ns= input()\n\nm = re.findall(r\"(?\u003c=[^aeiouAEIOU])([aeiouAEIOU]{2,})(?=[^aeiouAEIOU])\", s)\nfor x in m:\n    print(x)\nelse:\n    print(-1)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Re.findall() \u0026 Re.finditer()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\ns= input()\n\nm = re.findall(r\"(?\u003c=[^aeiouAEIOU])([aeiouAEIOU]{2,})(?=[^aeiouAEIOU])\", s)\nif m:\n    for x in m:\n        print(x)\nelse:\n    print(-1)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Re.findall() \u0026 Re.finditer()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\ns= input()\n\nm = re.findall(r\"(?\u003c=[^aeiouAEIOU])([aeiouAEIOU]{2,})(?=[^aeiouAEIOU])\", s)\nif m:\n    for x in m:\n        print(x)\nelse:\n    print(-1)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Re.start() \u0026 Re.end()","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\nS = input()\nk = input()\n\nmatch = False\nfor x in range(len(S)):\n    m = re.search(k,S[x:(x+len(k))])\n    if m:\n        match= True\n        print((m.start()+x , m.end()+x-1))\nif not match:\n    print((-1,-1))\n      \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Regex Substitution","code":"import re\n\nn = int(input())\ns = [input() for x in range(n) ]\n\nfor x in range(len(s)):\n    s[x] = re.sub(r\"((?\u003c= )(\u0026\u0026)(?= ))\", \"and\", s[x])\n    s[x] = re.sub(r\"((?\u003c= )(\\|\\|)(?= ))\", \"or\", s[x])\n\n\nprint(\"\\n\".join(s))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating Roman Numerals","code":"regex_pattern = r\"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\n\n#i had to look online at all the ROMAN NUMBERS and all the possibility\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating phone numbers","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\nn = int(input())\ns = [input() for x in range(n)]\n\nfor x in s:\n    print(\"YES\") if re.match(\"^[789][0-9]{9}$\",x) else print(\"NO\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating and Parsing Email Addresses","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\nn = int(input())\ns = [input() for x in range(n)]\nfor x in s:\n    if re.match(r\"^[a-zA-Z]*\\@*[a-zA-Z]+\\.[a-zA-Z]{1,3}\",x):\n        print(x)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating and Parsing Email Addresses","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\nn = int(input())\ns = [input() for x in range(n)]\nfor x in s:\n    name = x.split()[0]\n    mail = x.split()[1]\n    if re.match(r\"\u003c[a-z][a-zA-Z0-9\\-\\.\\_]+\\@[a-zA-Z]+\\.[a-zA-Z]{1,3}\u003e\",mail):\n        print(x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Hex Color Code","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nimport re\nn = int(input())\ns = [input() for x in range(n)]\n\n\nfor x in range(len(s)):\n    a = re.findall(r\"#[0-9a-fA-F]{3,6}(?=[,|;|')'])\", s[x])\n    if a:\n        for b in a:\n            print(b)\n    \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom html.parser import HTMLParser\n\n# create a subclass and override the handler methods\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(f\"Start : {tag}\")\n        if len(attrs) \u003e 0:\n            for x in attrs:\n                print(f\"-\u003e {str(x[0])} \u003e {str(x[1])}\")\n    def handle_endtag(self, tag):\n        print(f\"End   : {tag}\")\n    def handle_startendtag(self, tag, attrs):\n        print(f\"Empty : {tag}\")\n        if len(attrs) \u003e 0:\n            for x in attrs:\n                print(f\"-\u003e {xstr([0])} \u003e {str(x[1])}\")\n\n# instantiate the parser and fed it some HTML\nparser = MyHTMLParser()\nn = int(input())\ns = [input() for x in range(n)]\nfor x in s:\n    parser.feed(x)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom html.parser import HTMLParser\n\n# create a subclass and override the handler methods\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(f\"Start : {tag}\")\n        for x in attrs:\n            print(f\"-\u003e {str(x[0])} \u003e {str(x[1])}\")\n    def handle_endtag(self, tag):\n        print(f\"End   : {tag}\")\n    def handle_startendtag(self, tag, attrs):\n        print(f\"Empty : {tag}\")\n        for x in attrs:\n            print(f\"-\u003e {xstr([0])} \u003e {str(x[1])}\")\n\n# instantiate the parser and fed it some HTML\nparser = MyHTMLParser()\nn = int(input())\ns = [input() for x in range(n)]\nfor x in s:\n    parser.feed(x)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom html.parser import HTMLParser\n\n# create a subclass and override the handler methods\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(f\"Start : {tag}\")\n        for x in attrs:\n            print(f\"-\u003e {str(x[0])} \u003e {str(x[1])}\")\n    def handle_endtag(self, tag):\n        print(f\"End   : {tag}\")\n    def handle_startendtag(self, tag, attrs):\n        print(f\"Empty : {tag}\")\n        for x in attrs:\n            print(f\"-\u003e {str([0])} \u003e {str(x[1])}\")\n\n# instantiate the parser and fed it some HTML\nparser = MyHTMLParser()\nn = int(input())\ns = [input() for x in range(n)]\nfor x in s:\n    parser.feed(x)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"HTML Parser - Part 1","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom html.parser import HTMLParser\n\n# create a subclass and override the handler methods\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrs):\n        print(f\"Start : {tag}\")\n        for x in attrs:\n            print(f\"-\u003e {str(x[0])} \u003e {str(x[1])}\")\n    def handle_endtag(self, tag):\n        print(f\"End   : {tag}\")\n    def handle_startendtag(self, tag, attrs):\n        print(f\"Empty : {tag}\")\n        for x in attrs:\n            print(f\"-\u003e {str(x[0])} \u003e {str(x[1])}\")\n\n# instantiate the parser and fed it some HTML\nparser = MyHTMLParser()\nn = int(input())\ns = [input() for x in range(n)]\nfor x in s:\n    parser.feed(x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"HTML Parser - Part 2","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom html.parser import HTMLParser\n\nclass MyHTMLParser(HTMLParser):\n    def handle_comment(self, data):\n        if \"\\n\" in data:\n            print(f\"\u003e\u003e\u003e Multi-line Comment: {data}\")\n        else:\n            print(f\"\u003e\u003e\u003e Single-line Comment: {data})\n    def handle_data(self, data):\n        print(\"\u003e\u003e\u003e Data     : {data})\n\nn = int(input())\ns = [input() for x in range(n)]\nparser = MyHTMLParser()\nfor x in s:\n    parser.feed(x)\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Alphabet Rangoli","code":"import string\n\ndef print_rangoli(size):\n     a = string.ascii_lowercase\n     st = []\n     st.append(a[size-1])\n     print(\"-\".join(st).center(size*4-3,'-'))\n     for x in range(size,0,-1):\n        st.append(a[x-2])\n        for x in list(reversed(st[:-1])):\n            st.append(x)\n        print(st)\n        print(\"-\".join(st).center(size*4-3,'-'))\n\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"HTML Parser - Part 2","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom html.parser import HTMLParser\nimport re\n\n\nclass MyHTMLParser(HTMLParser):\n    def handle_comment(self, data):\n          if re.search('\\n',data):\n              print (\"\u003e\u003e\u003e Multi-line Comment\", data, sep='\\n')\n          else:\n              print (\"\u003e\u003e\u003e Single-line Comment\", data, sep='\\n')\n              \n    def handle_data(self, data):\n            if data != '\\n':\n                print (\"\u003e\u003e\u003e Data\", data, sep='\\n')\n        \n        \nn = int(input())\nhtml = \"\"       \nfor _ in range(n):\n    html += input().rstrip()\n    html += '\\n'\nparser = MyHTMLParser()\nparser.feed(html)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Detect HTML Tags, Attributes and Attribute Values","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nfrom html.parser import HTMLParser\n\n\nclass MyHTMLParser(HTMLParser):\n    def handle_starttag(self, tag, attrib):\n        print(tag)\n        for att in attrib:\n            print(f\"-\u003e {att[0]} \u003e {att[1]}\")\n            \n\nn = int(input())\nparser = MyHTMLParser()\ns = \"\".join([input().strip() for x in range(n)])\nparser.feed(s)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating UID ","code":"import re\nn = int(input())\nl = [input() for _ in range(n)]\nfor x in l:\n    if re.match(r\"^(?=(?:[a-z\\d]*[A-Z]){2})(?=(?:\\D*\\d){3})(?:([a-zA-Z\\d])(?!.*\\1)){10]\", x):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating UID ","code":"import re\nn = int(input())\nl = [input() for _ in range(n)]\nfor x in l:\n    if re.match(r\"^(?=(?:[a-z\\d]*[A-Z]){2})(?=(?:\\D*\\d){3})(?:([a-zA-Z\\d])(?!.*\\1)){10}\", x):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating Credit Card Numbers","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\nn = int(input())\nl = [input() for _ in range(n)]\nfor x in l:\n    if re.match(r\"^[456][0-9]{3}\\-?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}$\", x) and not re.match(r\"(\\d)\\1{3}\",x):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating Credit Card Numbers","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\nn = int(input())\nl = [input() for _ in range(n)]\nfor x in l:\n    x = x.replace(\"-\",\"\")\n    if re.match(r\"^[456][0-9]{3}\\-?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}$\", x) and not re.match(r\"(\\d)\\1{3}\",x):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating Credit Card Numbers","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\nn = int(input())\nl = [input() for _ in range(n)]\nfor x in l:\n    if re.match(r\"^[456][0-9]{3}\\-?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}$\", x) and not re.match(r\"(\\d)\\1{3}\",x.replace(\"-\",\"\")):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating Credit Card Numbers","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\nn = int(input())\nl = [input() for _ in range(n)]\nfor x in l:\n    print(x.replace(\"-\",\"\"))\n    if re.match(r\"^[456][0-9]{3}\\-?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}$\", x) and not re.search(r\"(\\d)\\1{3}\",x.replace(\"-\",\"\")):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating Credit Card Numbers","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\nn = int(input())\nl = [input() for _ in range(n)]\nfor x in l:\n    if re.match(r\"^[456][0-9]{3}\\-?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}$\", x) and not re.search(r\"(\\d)\\1{3}\",x.replace(\"-\",\"\")):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating Credit Card Numbers","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport re\nn = int(input())\nl = [input() for _ in range(n)]\nfor x in l:\n    #The first regex is for 4 quadruplet and the start of the string\n    #while the second is to search for 4 repeating number\n    if re.match(r\"^[456][0-9]{3}\\-?[0-9]{4}\\-?[0-9]{4}\\-?[0-9]{4}$\", x) and not re.search(r\"(\\d)\\1{3}\",x.replace(\"-\",\"\")):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Validating Postal Codes","code":"regex_integer_in_range = r\"(?=^[1-9]{1}\\d{5}$)\"\t# Do not delete 'r'.\nregex_alternating_repetitive_digit_pair = r\"(?=(\\d).\\1)\"\t# Do not delete 'r'.\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Matrix Script","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\n\nfirst_multiple_input = input().rstrip().split()\n\nn = int(first_multiple_input[0])\n\nm = int(first_multiple_input[1])\n\nmatrix = []\n\nfor _ in range(n):\n    matrix_item = input()\n    matrix.append(matrix_item)\n\ns= \"\".join([matrix[i][ij] for j in range(m) for i in range(n)])\nprint(re.sub(r'(?\u003c=[a-zA-Z0-9])[^a-zA-Z0-9]+(?=[a-zA-Z0-9])',' ',s))\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Matrix Script","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\n\nfirst_multiple_input = input().rstrip().split()\n\nn = int(first_multiple_input[0])\n\nm = int(first_multiple_input[1])\n\nmatrix = []\n\nfor _ in range(n):\n    matrix_item = input()\n    matrix.append(matrix_item)\n\ns= \"\".join([matrix[i][j] for j in range(m) for i in range(n)])\nprint(re.sub(r'(?\u003c=[a-zA-Z0-9])[^a-zA-Z0-9]+(?=[a-zA-Z0-9])',' ',s))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Matrix Script","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\n\nfirst_multiple_input = input().rstrip().split()\n\nn = int(first_multiple_input[0])\n\nm = int(first_multiple_input[1])\n\nmatrix = []\n\nfor _ in range(n):\n    matrix_item = input()\n    matrix.append(matrix_item)\n\n#i use list comprehension to arrange the string in the right way\ns= \"\".join([matrix[i][j] for j in range(m) for i in range(n)])\nprint(re.sub(r'(?\u003c=[a-zA-Z0-9])[^a-zA-Z0-9]+(?=[a-zA-Z0-9])',' ',s))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Athlete Sort","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    m = int(first_multiple_input[1])\n\n    arr = [list(map(int, input().rstrip().split())) for _ in range(n)]\n    k = int(input().strip())\n    arr =  sorted(arr, key= lambda x: x[k])\n    for x in arr:\n        print(*x)\n        \n    #we have also seen in the next exercises the \"itemgetter\" module, that would be also another possible solution. But we need to import it\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Time Delta","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom datetime import datetime as dt\n\n\n# Complete the time_delta function below.\ndef time_delta(t1, t2):\n    #solution with datetime\n    f= \"%a %d %b %Y %H:%M:%S %z\"\n    t1tm = dt.strptime(t1,f)\n    t2tm = dt.strptime(t2,f)\n    return str(int((t1tm-t2tm).total_seconds()))\n    \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        t1 = input()\n\n        t2 = input()\n\n        delta = time_delta(t1, t2)\n\n        fptr.write(delta + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Time Delta","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom datetime import datetime as dt\n\n\n# Complete the time_delta function below.\ndef time_delta(t1, t2):\n    #solution with datetime\n    f= \"%a %d %b %Y %H:%M:%S %z\"\n    t1tm = dt.strptime(t1,f)\n    t2tm = dt.strptime(t2,f)\n    return str(round(abs((t1tm-t2tm).total_seconds()), 0))\n    \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        t1 = input()\n\n        t2 = input()\n\n        delta = time_delta(t1, t2)\n\n        fptr.write(delta + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Time Delta","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom datetime import datetime as dt\n\n\n# Complete the time_delta function below.\ndef time_delta(t1, t2):\n    #solution with datetime\n    f= \"%a %d %b %Y %H:%M:%S %z\"\n    t1tm = dt.strptime(t1,f)\n    t2tm = dt.strptime(t2,f)\n    return str(round(abs((t1tm-t2tm).total_seconds())))\n    \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        t1 = input()\n\n        t2 = input()\n\n        delta = time_delta(t1, t2)\n\n        fptr.write(delta + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Time Delta","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom datetime import datetime as dt\n\n\n# Complete the time_delta function below.\ndef time_delta(t1, t2):\n    #solution with datetime\n    f= \"%a %d %b %Y %H:%M:%S %z\"\n    t1tm = dt.strptime(t1,f)\n    t2tm = dt.strptime(t2,f)\n    return str(round(abs((t1tm-t2tm).total_seconds())))\n    \n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        t1 = input()\n\n        t2 = input()\n\n        delta = time_delta(t1, t2)\n\n        fptr.write(delta + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    names = []\n    scores = []\n    for _ in range(int(input())):\n        names.append(input())\n        scores.append(float(input()))\n    #i use the set to find the second lowest\n    second = sorted(set(scores))[1]\n    l = []\n    for i in range(len(names)):\n        if second == scores[i]:\n            l.append(names[i])\n    for name in l:\n        print(name)\n            \n        \n            \n","score":0.888888888889,"language":"pypy3"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    names = []\n    scores = []\n    for _ in range(int(input())):\n        names.append(input())\n        scores.append(float(input()))\n    #i use the set to find the second lowest\n    second = sorted(set(scores))[1]\n    l = []\n    for i in range(len(names)):\n        if second == scores[i]:\n            l.append(names[i])\n    for name in sorted(l):\n        print(name)\n            \n        \n            \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    names = []\n    scores = []\n    for _ in range(int(input())):\n        names.append(input())\n        scores.append(float(input()))\n    #i use the set to find the second lowest\n    second = sorted(set(scores))[1]\n    l = []\n    for i in range(len(names)):\n        if second == scores[i]:\n            l.append(names[i])\n    for name in sorted(l):\n        print(name)\n            \n        \n            \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Alphabet Rangoli","code":"import string\n\ndef print_rangoli(size):\n    a = \" \" + string.ascii_lowercase\n    #the first loop is for the first half of the \"pyramid\", the second if \n    #for the lower half\n    for x in range(size,0,-1):\n        #the first string is for the left portion of each line of string\n        st = a[size:x:-1]\n        #while the second is for the right one\n        st += a[x:size+1]\n        #now i join the string with the char \"-\"\n        s = \"-\".join(st)\n        #then i print it with the center function \n        #and fill the empty spaces with \"-\"\n        print(s.center(size*4-3,'-'))\n    \n        \n    #same process as before, just x from min to max(size-1)\n    for x in range(0,size-1):\n        st = a[(size):x+2:-1]\n        st += a[x+2:size+1]\n        #first i join the \n        s = \"-\".join(st)\n        print(s.center(size*4-3,'-'))\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Alphabet Rangoli","code":"import string\n\ndef print_rangoli(size):\n    a = \" \" + string.ascii_lowercase\n    #the first loop is for the first half of the \"pyramid\", the second if \n    #for the lower half\n    for x in range(size,0,-1):\n        #the first string is for the left portion of each line of string\n        st = a[size:x:-1]\n        #while the second is for the right portion of the string\n        st += a[x:size+1]\n        #now i join each char in the string with the char \"-\"\n        s = \"-\".join(st)\n        #then i print it with the center function \n        #and fill the empty spaces with \"-\"\n        print(s.center(size*4-3,'-'))\n    \n        \n    #same process as before, just x from min to max(size-1)\n    for x in range(0,size-1):\n        st = a[(size):x+2:-1]\n        st += a[x+2:size+1]\n        #first i join the \n        s = \"-\".join(st)\n        print(s.center(size*4-3,'-'))\n\n","score":1.0,"language":"pypy3"}],"teams":[],"contest_participations":[{"jobs_consent":null,"contest":"Master"}],"forum_comments":[],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[],"run_codes":[],"contests_created":[],"job_applications":[],"skills_test":[]}